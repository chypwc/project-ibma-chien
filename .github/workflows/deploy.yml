name: Deploy S3-Lambda Infrastructure

on:
  workflow_dispatch:
    inputs:
      region:
        description: "AWS Region"
        required: true
        default: "ap-southeast-2"
      sourceBucket:
        description: "Source S3 bucket name"
        required: true
        default: "source-bucket-chien"
      destinationBucket:
        description: "Destination S3 bucket name"
        required: true
        default: "destination-bucket-chien"
      lambdaZipBucket:
        description: "S3 bucket to upload Lambda ZIP"
        required: true
        default: "lambda-function-bucket-chien"

jobs:
  deploy:
    name: Deploy stack to AWS
    runs-on: ubuntu-latest
    outputs:
      env-name: ${{ steps.env-name.outputs.environment }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.region }}

      - name: Configure environment name
        id: env-name
        env:
          REPO: ${{ github.repository }}
        run: |
          ENVIRONMENT=$(echo $REPO | tr "/" "-")
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT

      - name: Delete broken stack if in ROLLBACK_COMPLETE
        run: |
          STACK_NAME=${{ steps.env-name.outputs.environment }}-s3-lambda-stack
          STATUS=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query "Stacks[0].StackStatus" \
            --output text 2>/dev/null || echo "NOT_FOUND")
          echo "Current stack status: $STATUS"
          if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Deleting failed stack..."
            aws cloudformation delete-stack --stack-name $STACK_NAME
            echo "Waiting for deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME
          fi

      - name: Package Lambda and upload to S3
        run: |
          zip -j lambda_function.zip lambda/transfer.py
          aws s3 cp lambda_function.zip s3://${{ github.event.inputs.lambdaZipBucket }}/lambda_function.zip

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install pandas and pyarrow to layer directory
        run: |
          mkdir -p python
          pip install pandas pyarrow -t python/

      - name: Zip Lambda layer
        run: zip -r pandas-layer.zip python

      - name: Upload Lambda layer to S3
        run: |
          aws s3 cp pandas-layer.zip s3://${{ github.event.inputs.lambdaZipBucket }}/pandas-layer.zip

      - name: Debug input parameters
        run: |
          echo "Region: ${{ github.event.inputs.region }}"
          echo "SourceBucket: ${{ github.event.inputs.sourceBucket }}"
          echo "DestinationBucket: ${{ github.event.inputs.destinationBucket }}"
          echo "LambdaZipBucket: ${{ github.event.inputs.lambdaZipBucket }}"
          echo "LambdaS3Key: lambda_function.zip"

      - name: Deploy CloudFormation stack
        id: deploy-cfn
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ steps.env-name.outputs.environment }}-s3-lambda-stack
          template: cfn/s3-lambda-transfer.yml
          parameter-overrides: >-
            SourceBucketName=${{ github.event.inputs.sourceBucket }},
            DestinationBucketName=${{ github.event.inputs.destinationBucket }},
            LambdaS3Bucket=${{ github.event.inputs.lambdaZipBucket }},
            LambdaS3Key=lambda_function.zip
          capabilities: CAPABILITY_NAMED_IAM
          no-fail-on-empty-changeset: "1"
